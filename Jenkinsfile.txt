pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'supsolution-node-app:latest'
        DOCKER_REGISTRY = 'dockerhubusername/supsolution-node-app'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the Git repository
                git branch: 'master', url: 'https://github.com/KrishBM/Sup-Solution.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Install dependencies
                    bat 'npm install'
                    bat 'npm install lite-server'
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    // Run unit tests for the Node.js application
                    bat 'npm test'
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        bat """
                            sonar-scanner -Dsonar.projectKey=sup-solution \
                                          -Dsonar.sources=. \
                                          -Dsonar.host.url=http://localhost:9000 \
                                          -Dsonar.login=$SONAR_AUTH_TOKEN
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    bat 'docker build -t $DOCKER_IMAGE .'
                }
            }
        }

        stage('Deploy to Test Environment') {
            steps {
                script {
                    // Deploy to Docker container (Test environment)
                    bat 'docker run -d -p 3000:3000 --name test_env $DOCKER_IMAGE'
                }
            }
        }

        stage('Release to Production') {
            steps {
                input message: 'Promote to Production?'
                script {
                    // Push Docker image to DockerHub
                    withCredentials([usernamePassword(credentialsId: 'DOCKER_HUB_CREDENTIALS', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat """
                            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                            docker tag $DOCKER_IMAGE $DOCKER_REGISTRY
                            docker push $DOCKER_REGISTRY
                        """
                    }
                    // Deploy the container to production
                    bat 'docker run -d -p 80:3000 --name production_env $DOCKER_REGISTRY'
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    echo 'Monitoring setup complete. Placeholder for actual integration with tools like Datadog or New Relic.'
                }
            }
        }
    }

    post {
        always {
            // Clean workspace to free up space
            cleanWs()
        }

        success {
            echo 'Build was successful.'
        }

        failure {
            echo 'Build failed!'
        }

        unstable {
            echo 'Build is unstable.'
        }
    }
}
